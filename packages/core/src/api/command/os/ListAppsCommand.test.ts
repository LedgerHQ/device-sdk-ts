import { Command } from "@api/command/Command";
import {
  CommandErrorResult,
  CommandResultFactory,
  isSuccessCommandResult,
} from "@api/command/model/CommandResult";
import { ApduResponse } from "@api/device-session/ApduResponse";

import {
  ListAppsCommand,
  ListAppsCommandError,
  ListAppsCommandErrorCodes,
  ListAppsResponse,
} from "./ListAppsCommand";

// [NOTE] EXAMPLES CREATED USING A NANO X

const LIST_APP_APDU = Uint8Array.from([0xe0, 0xde, 0x00, 0x00, 0x00]);
const CONTINUE_LIST_APP_ADPU = Uint8Array.from([0xe0, 0xdf, 0x00, 0x00, 0x00]);

// only BITCOIN installed
const LIST_APP_RESPONSE_1_APP = Uint8Array.from([
  0x01, 0x4d, 0x00, 0x13, 0xca, 0x50, 0xa2, 0x25, 0x9e, 0x03, 0xa9, 0x89, 0x49,
  0x54, 0x1f, 0xf3, 0xda, 0xf1, 0x86, 0x29, 0xa3, 0x0f, 0xb1, 0x69, 0xaf, 0x18,
  0xd2, 0x71, 0x2b, 0xa8, 0xb8, 0x29, 0x6f, 0xf1, 0xc5, 0x31, 0x0f, 0xa5, 0xa9,
  0x7e, 0xff, 0xa8, 0x16, 0x73, 0x7b, 0xaf, 0x49, 0x63, 0x5a, 0x42, 0x35, 0x70,
  0x12, 0x73, 0x4b, 0x90, 0x9e, 0x27, 0x96, 0xd4, 0xe7, 0xf1, 0x4b, 0x2c, 0xcd,
  0x9c, 0xa4, 0x76, 0x28, 0x34, 0x07, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
]);
const LIST_APP_RESPONSE_1_APP_EXPECTED = [
  {
    appEntryLength: 77,
    appSizeInBlocks: 19,
    appCodeHash:
      "a2259e03a98949541ff3daf18629a30fb169af18d2712ba8b8296ff1c5310fa5",
    appFullHash:
      "a97effa816737baf49635a42357012734b909e2796d4e7f14b2ccd9ca4762834",
    appName: "Bitcoin",
  },
];

// BITCOIN & ETHEREUM installed
const LIST_APP_RESPONSE_2_APPS = Uint8Array.from([
  0x01, 0x4d, 0x00, 0x13, 0xca, 0x50, 0xa2, 0x25, 0x9e, 0x03, 0xa9, 0x89, 0x49,
  0x54, 0x1f, 0xf3, 0xda, 0xf1, 0x86, 0x29, 0xa3, 0x0f, 0xb1, 0x69, 0xaf, 0x18,
  0xd2, 0x71, 0x2b, 0xa8, 0xb8, 0x29, 0x6f, 0xf1, 0xc5, 0x31, 0x0f, 0xa5, 0xa9,
  0x7e, 0xff, 0xa8, 0x16, 0x73, 0x7b, 0xaf, 0x49, 0x63, 0x5a, 0x42, 0x35, 0x70,
  0x12, 0x73, 0x4b, 0x90, 0x9e, 0x27, 0x96, 0xd4, 0xe7, 0xf1, 0x4b, 0x2c, 0xcd,
  0x9c, 0xa4, 0x76, 0x28, 0x34, 0x07, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
  0x4e, 0x00, 0x13, 0xca, 0x40, 0x33, 0x95, 0x25, 0x39, 0x8f, 0xe4, 0x5f, 0x73,
  0xc8, 0xb7, 0x59, 0xee, 0xe0, 0x1a, 0x7c, 0xe1, 0x71, 0x3d, 0x18, 0x54, 0x4d,
  0x56, 0xee, 0x48, 0x64, 0xe0, 0x49, 0xb9, 0x66, 0xe6, 0x29, 0x4d, 0xc7, 0xa0,
  0x94, 0x70, 0xf7, 0xa3, 0x78, 0x51, 0xa8, 0xac, 0xf9, 0x8a, 0xda, 0xbf, 0x3e,
  0x2c, 0x2f, 0x1f, 0x7e, 0xde, 0xfd, 0x31, 0xc6, 0xb5, 0x4d, 0xc1, 0xc7, 0xdc,
  0x29, 0x91, 0xd8, 0x53, 0x08, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
]);
const LIST_APP_RESPONSE_2_APPS_EXPECTED = [
  {
    appEntryLength: 77,
    appSizeInBlocks: 19,
    appCodeHash:
      "a2259e03a98949541ff3daf18629a30fb169af18d2712ba8b8296ff1c5310fa5",
    appFullHash:
      "a97effa816737baf49635a42357012734b909e2796d4e7f14b2ccd9ca4762834",
    appName: "Bitcoin",
  },
  {
    appEntryLength: 78,
    appSizeInBlocks: 19,
    appCodeHash:
      "339525398fe45f73c8b759eee01a7ce1713d18544d56ee4864e049b966e6294d",
    appFullHash:
      "c7a09470f7a37851a8acf98adabf3e2c2f1f7edefd31c6b54dc1c7dc2991d853",
    appName: "Ethereum",
  },
];

// POLYGON as the last installed app
const LIST_APP_RESPONSE_CONTINUE_1_APP = Uint8Array.from([
  0x01, 0x4d, 0x00, 0x01, 0xca, 0x40, 0xdc, 0x86, 0x22, 0x9c, 0x79, 0x0a, 0xe0,
  0x3e, 0xb9, 0x13, 0x09, 0xee, 0x1c, 0x94, 0x60, 0x0a, 0x6d, 0xdf, 0x49, 0x0a,
  0x9d, 0x69, 0x0b, 0xfb, 0x0a, 0x2f, 0x02, 0x02, 0x0e, 0xbb, 0x4c, 0x1f, 0xb4,
  0xc2, 0xe6, 0x1b, 0xae, 0x1b, 0xab, 0x2b, 0x73, 0x47, 0xdf, 0x3b, 0x3b, 0x1a,
  0x2f, 0xd9, 0xf1, 0xfb, 0xaf, 0xfb, 0x3a, 0xa5, 0xf8, 0xaa, 0x23, 0x3e, 0xd2,
  0xbf, 0xaa, 0xbc, 0xc1, 0x3e, 0x07, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e,
]);
const LIST_APP_RESPONSE_CONTINUE_1_APP_EXPECTED = [
  {
    appEntryLength: 77,
    appSizeInBlocks: 1,
    appCodeHash:
      "dc86229c790ae03eb91309ee1c94600a6ddf490a9d690bfb0a2f02020ebb4c1f",
    appFullHash:
      "b4c2e61bae1bab2b7347df3b3b1a2fd9f1fbaffb3aa5f8aa233ed2bfaabcc13e",
    appName: "Polygon",
  },
];

// BINANCE SMART CHAIN & SOLANA installed
const LIST_APP_RESPONSE_CONTINUE_2_APPS = Uint8Array.from([
  0x01, 0x59, 0x00, 0x01, 0xca, 0x40, 0xfb, 0x2b, 0x7d, 0x26, 0x25, 0xd7, 0x18,
  0x84, 0x27, 0x07, 0x05, 0x53, 0x10, 0x80, 0xc2, 0x18, 0x28, 0x79, 0xdd, 0x1e,
  0xd9, 0xe3, 0x4b, 0x16, 0xba, 0xe4, 0xd0, 0x76, 0x9b, 0x45, 0xd7, 0xd8, 0xd7,
  0x5b, 0x37, 0x5f, 0x6a, 0x33, 0xa1, 0xe6, 0x75, 0x79, 0x26, 0x9a, 0x16, 0xef,
  0x44, 0x24, 0xa3, 0xd9, 0x20, 0x52, 0x15, 0xb6, 0x15, 0x2b, 0x6a, 0xd8, 0xbc,
  0xc9, 0x0e, 0x3c, 0x32, 0xf9, 0x13, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
  0x20, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x20, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c,
  0x00, 0x0e, 0xca, 0x00, 0xfe, 0xe6, 0x19, 0x56, 0x1a, 0xaf, 0x43, 0x29, 0x62,
  0x0c, 0x02, 0xd8, 0x48, 0x8e, 0x3f, 0x75, 0xa4, 0x35, 0x33, 0x17, 0x22, 0xf5,
  0x61, 0x15, 0x79, 0xf7, 0x53, 0x97, 0x80, 0x94, 0xd1, 0x14, 0xcc, 0xbf, 0xb2,
  0x56, 0x72, 0x9a, 0x9e, 0x28, 0x74, 0xb7, 0x23, 0xd6, 0x4c, 0xe4, 0x87, 0xf3,
  0x57, 0xef, 0xa7, 0x16, 0xb2, 0xd0, 0xcd, 0x34, 0x98, 0x97, 0xe9, 0x6e, 0x74,
  0x20, 0x2a, 0xca, 0x06, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
]);
const LIST_APP_RESPONSE_CONTINUE_2_APPS_EXPECTED = [
  {
    appEntryLength: 89,
    appSizeInBlocks: 1,
    appCodeHash:
      "fb2b7d2625d71884270705531080c2182879dd1ed9e34b16bae4d0769b45d7d8",
    appFullHash:
      "d75b375f6a33a1e67579269a16ef4424a3d9205215b6152b6ad8bcc90e3c32f9",
    appName: "Binance Smart Chain",
  },
  {
    appEntryLength: 76,
    appSizeInBlocks: 14,
    appCodeHash:
      "fee619561aaf4329620c02d8488e3f75a435331722f5611579f753978094d114",
    appFullHash:
      "ccbfb256729a9e2874b723d64ce487f357efa716b2d0cd349897e96e74202aca",
    appName: "Solana",
  },
];

describe("ListAppCommand", () => {
  let command: Command<ListAppsResponse, { isContinue: boolean }>;

  describe("first list app command", () => {
    beforeEach(() => {
      command = new ListAppsCommand();
    });

    describe("getApdu", () => {
      it("should return the ListApp APDU", () => {
        const apdu = command.getApdu();
        expect(apdu.getRawApdu()).toStrictEqual(LIST_APP_APDU);
      });
    });

    describe("parseResponse", () => {
      it("should parse the response with no apps", () => {
        const response = new ApduResponse({
          statusCode: Uint8Array.from([0x90, 0x00]),
          data: new Uint8Array(),
        });

        expect(command.parseResponse(response)).toStrictEqual(
          CommandResultFactory({ data: [] }),
        );
      });

      it("should parse the response with 1 app", () => {
        const response = new ApduResponse({
          statusCode: Uint8Array.from([0x90, 0x00]),
          data: LIST_APP_RESPONSE_1_APP,
        });

        expect(command.parseResponse(response)).toStrictEqual(
          CommandResultFactory({ data: LIST_APP_RESPONSE_1_APP_EXPECTED }),
        );
      });

      it("should parse the response with 2 apps", () => {
        const response = new ApduResponse({
          statusCode: Uint8Array.from([0x90, 0x00]),
          data: LIST_APP_RESPONSE_2_APPS,
        });

        expect(command.parseResponse(response)).toStrictEqual(
          CommandResultFactory({ data: LIST_APP_RESPONSE_2_APPS_EXPECTED }),
        );
      });
    });

    describe("errors", () => {
      it("should return error command result if the response status code is not success", () => {
        const response = new ApduResponse({
          statusCode: Uint8Array.from([0x6a, 0x82]),
          data: new Uint8Array(),
        });
        const result = command.parseResponse(response);

        expect(isSuccessCommandResult(result)).toBe(false);
      });

      it("should return an error", () => {
        const response = new ApduResponse({
          statusCode: Uint8Array.from([0x55, 0x01]),
          data: new Uint8Array(),
        });

        // when
        const result = command.parseResponse(response);

        expect(isSuccessCommandResult(result)).toBe(false);
      });
    });
  });

  describe("continue list app command", () => {
    beforeEach(() => {
      command = new ListAppsCommand({ isContinue: true });
    });

    describe("getApdu", () => {
      it("should return the Continue ListApp APDU", () => {
        const apdu = command.getApdu();
        expect(apdu.getRawApdu()).toStrictEqual(CONTINUE_LIST_APP_ADPU);
      });
    });

    describe("parseResponse", () => {
      it("should parse the response with 1 app", () => {
        const response = new ApduResponse({
          statusCode: Uint8Array.from([0x90, 0x00]),
          data: LIST_APP_RESPONSE_CONTINUE_1_APP,
        });

        expect(command.parseResponse(response)).toStrictEqual(
          CommandResultFactory({
            data: LIST_APP_RESPONSE_CONTINUE_1_APP_EXPECTED,
          }),
        );
      });

      it("should parse the response with 2 apps", () => {
        const response = new ApduResponse({
          statusCode: Uint8Array.from([0x90, 0x00]),
          data: LIST_APP_RESPONSE_CONTINUE_2_APPS,
        });

        expect(command.parseResponse(response)).toStrictEqual(
          CommandResultFactory({
            data: LIST_APP_RESPONSE_CONTINUE_2_APPS_EXPECTED,
          }),
        );
      });

      it("should parse the response when reaching the end of the list", () => {
        const response = new ApduResponse({
          statusCode: Uint8Array.from([0x90, 0x00]),
          data: new Uint8Array(),
        });

        expect(command.parseResponse(response)).toStrictEqual(
          CommandResultFactory({ data: [] }),
        );
      });
    });

    describe("errors", () => {
      it("should throw if ListApp wasn't called before", () => {
        const response = new ApduResponse({
          statusCode: Uint8Array.from([0x66, 0x24]),
          data: new Uint8Array(),
        });
        const result = command.parseResponse(
          response,
        ) as CommandErrorResult<ListAppsCommandErrorCodes>;

        expect(isSuccessCommandResult(result)).toBe(false);
        expect(result.error).toBeInstanceOf(ListAppsCommandError);
      });
    });
  });
});
