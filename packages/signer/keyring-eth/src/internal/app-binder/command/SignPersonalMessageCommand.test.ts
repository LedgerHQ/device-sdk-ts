import { SignPersonalMessageCommand } from "./SignPersonalMessageCommand";

const DERIVATION_PATH = "44'/60'/0'/0/0";

const SIGN_PERSONAL_EMPTY_MESSAGE_APDU = new Uint8Array([
  0xe0, 0x08, 0x00, 0x00, 0x19, 0x05, 0x80, 0x00, 0x00, 0x2c, 0x80, 0x00, 0x00,
  0x3c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
]);

const SIGN_PERSONAL_MESSAGE_INVALID_INDEX_APDU = new Uint8Array([
  0xe0, 0x08, 0x80, 0x00, 0x00,
]);

const SIGN_PERSONAL_SHORT_MESSAGE = "test";
const SIGN_PERSONAL_SHORT_MESSAGE_APDU = new Uint8Array([
  0xe0, 0x08, 0x00, 0x00, 0x1d, 0x05, 0x80, 0x00, 0x00, 0x2c, 0x80, 0x00, 0x00,
  0x3c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0x74, 0x65, 0x73, 0x74,
]);

const SIGN_PERSONAL_LONG_MESSAGE =
  "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut in porta est, non vehicula enim. Etiam leo diam, accumsan ac pretium et, tincidunt in nunc. Quisque faucibus fermentum maximus. Donec non nisi ut erat auctor congue a vehicula neque. Maecenas volutpat lectus vel bibendum mattis. Aenean feugiat nulla diam, vitae interdum lacus ornare ac. Cras posuere, elit at convallis pretium, risus tortor volutpat sapien, eu mollis sapien dolor id sapien. Ut efficitur, ipsum vitae feugiat congue, ex nibh tristique nibh.";

const SIGN_PERSONAL_LONG_MESSAGE_FIRST_APDU = new Uint8Array([
  0xe0, 0x08, 0x00, 0x00, 0x96, 0x05, 0x80, 0x00, 0x00, 0x2c, 0x80, 0x00, 0x00,
  0x3c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x06, 0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73,
  0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20,
  0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74,
  0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69,
  0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2e, 0x20, 0x55, 0x74, 0x20, 0x69,
  0x6e, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x20, 0x65, 0x73, 0x74, 0x2c, 0x20,
  0x6e, 0x6f, 0x6e, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x20,
  0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x20, 0x45, 0x74, 0x69, 0x61, 0x6d, 0x20, 0x6c,
  0x65, 0x6f, 0x20, 0x64, 0x69, 0x61, 0x6d, 0x2c, 0x20, 0x61, 0x63, 0x63, 0x75,
  0x6d, 0x73, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x20, 0x70, 0x72, 0x65, 0x74,
]);

const SIGN_PERSONAL_LONG_MESSAGE_SECOND_APDU = new Uint8Array([
  0xe0, 0x08, 0x80, 0x00, 0x96, 0x69, 0x75, 0x6d, 0x20, 0x65, 0x74, 0x2c, 0x20,
  0x74, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20,
  0x6e, 0x75, 0x6e, 0x63, 0x2e, 0x20, 0x51, 0x75, 0x69, 0x73, 0x71, 0x75, 0x65,
  0x20, 0x66, 0x61, 0x75, 0x63, 0x69, 0x62, 0x75, 0x73, 0x20, 0x66, 0x65, 0x72,
  0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
  0x73, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63, 0x20, 0x6e, 0x6f, 0x6e, 0x20,
  0x6e, 0x69, 0x73, 0x69, 0x20, 0x75, 0x74, 0x20, 0x65, 0x72, 0x61, 0x74, 0x20,
  0x61, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x67, 0x75, 0x65,
  0x20, 0x61, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x20, 0x6e,
  0x65, 0x71, 0x75, 0x65, 0x2e, 0x20, 0x4d, 0x61, 0x65, 0x63, 0x65, 0x6e, 0x61,
  0x73, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x70, 0x61, 0x74, 0x20, 0x6c, 0x65,
  0x63, 0x74, 0x75, 0x73, 0x20, 0x76, 0x65, 0x6c, 0x20, 0x62, 0x69, 0x62,
]);
const SIGN_PERSONAL_LONG_MESSAGE_THIRD_APDU = new Uint8Array([
  0xe0, 0x08, 0x80, 0x00, 0x96, 0x65, 0x6e, 0x64, 0x75, 0x6d, 0x20, 0x6d, 0x61,
  0x74, 0x74, 0x69, 0x73, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20,
  0x66, 0x65, 0x75, 0x67, 0x69, 0x61, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x61,
  0x20, 0x64, 0x69, 0x61, 0x6d, 0x2c, 0x20, 0x76, 0x69, 0x74, 0x61, 0x65, 0x20,
  0x69, 0x6e, 0x74, 0x65, 0x72, 0x64, 0x75, 0x6d, 0x20, 0x6c, 0x61, 0x63, 0x75,
  0x73, 0x20, 0x6f, 0x72, 0x6e, 0x61, 0x72, 0x65, 0x20, 0x61, 0x63, 0x2e, 0x20,
  0x43, 0x72, 0x61, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x75, 0x65, 0x72, 0x65, 0x2c,
  0x20, 0x65, 0x6c, 0x69, 0x74, 0x20, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x76,
  0x61, 0x6c, 0x6c, 0x69, 0x73, 0x20, 0x70, 0x72, 0x65, 0x74, 0x69, 0x75, 0x6d,
  0x2c, 0x20, 0x72, 0x69, 0x73, 0x75, 0x73, 0x20, 0x74, 0x6f, 0x72, 0x74, 0x6f,
  0x72, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x70, 0x61, 0x74, 0x20, 0x73, 0x61,
  0x70, 0x69, 0x65, 0x6e, 0x2c, 0x20, 0x65, 0x75, 0x20, 0x6d, 0x6f, 0x6c,
]);

const SIGN_PERSONAL_LONG_MESSAGE_FOURTH_APDU = new Uint8Array([
  0xe0, 0x08, 0x80, 0x00, 0x5d, 0x6c, 0x69, 0x73, 0x20, 0x73, 0x61, 0x70, 0x69,
  0x65, 0x6e, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x69, 0x64, 0x20, 0x73,
  0x61, 0x70, 0x69, 0x65, 0x6e, 0x2e, 0x20, 0x55, 0x74, 0x20, 0x65, 0x66, 0x66,
  0x69, 0x63, 0x69, 0x74, 0x75, 0x72, 0x2c, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d,
  0x20, 0x76, 0x69, 0x74, 0x61, 0x65, 0x20, 0x66, 0x65, 0x75, 0x67, 0x69, 0x61,
  0x74, 0x20, 0x63, 0x6f, 0x6e, 0x67, 0x75, 0x65, 0x2c, 0x20, 0x65, 0x78, 0x20,
  0x6e, 0x69, 0x62, 0x68, 0x20, 0x74, 0x72, 0x69, 0x73, 0x74, 0x69, 0x71, 0x75,
  0x65, 0x20, 0x6e, 0x69, 0x62, 0x68, 0x2e,
]);

const SIGN_PERSONAL_LONG_MESSAGE_APDUS = [
  SIGN_PERSONAL_LONG_MESSAGE_FIRST_APDU,
  SIGN_PERSONAL_LONG_MESSAGE_SECOND_APDU,
  SIGN_PERSONAL_LONG_MESSAGE_THIRD_APDU,
  SIGN_PERSONAL_LONG_MESSAGE_FOURTH_APDU,
];

describe("SignPersonalMessageCommand", (): void => {
  describe("getApdu", () => {
    it("should return correct apdu for an empty message", () => {
      // given
      const command = new SignPersonalMessageCommand({
        derivationPath: DERIVATION_PATH,
        message: "",
        index: 0,
      });
      // when
      const apdu = command.getApdu();
      // then
      expect(apdu.getRawApdu()).toStrictEqual(SIGN_PERSONAL_EMPTY_MESSAGE_APDU);
    });
    it("should return correct apdu for an invalid index", () => {
      // given
      const command = new SignPersonalMessageCommand({
        derivationPath: DERIVATION_PATH,
        message: SIGN_PERSONAL_SHORT_MESSAGE,
        index: 42,
      });
      // when
      const apdu = command.getApdu();
      // then
      expect(apdu.getRawApdu()).toStrictEqual(
        SIGN_PERSONAL_MESSAGE_INVALID_INDEX_APDU,
      );
    });
    it("should return the signPersonalMessage apdu for a short message", () => {
      // given
      const command = new SignPersonalMessageCommand({
        derivationPath: DERIVATION_PATH,
        message: SIGN_PERSONAL_SHORT_MESSAGE,
        index: 0,
      });
      // when
      const apdu = command.getApdu();
      // then
      expect(apdu.getRawApdu()).toStrictEqual(SIGN_PERSONAL_SHORT_MESSAGE_APDU);
    });
    it.each(SIGN_PERSONAL_LONG_MESSAGE_APDUS)(
      "should return correct apdu for a long message at index %#",
      (expectedApdu) => {
        // given
        const command = new SignPersonalMessageCommand({
          derivationPath: DERIVATION_PATH,
          message: SIGN_PERSONAL_LONG_MESSAGE,
          index: SIGN_PERSONAL_LONG_MESSAGE_APDUS.indexOf(expectedApdu),
        });
        // when
        const apdu = command.getApdu();
        // then
        expect(apdu.getRawApdu()).toStrictEqual(expectedApdu);
      },
    );
  });
});
