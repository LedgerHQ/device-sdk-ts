import {
  ApduResponse,
  CommandResultFactory,
  GlobalCommandErrorHandler,
} from "@ledgerhq/device-management-kit";
import { Just, Nothing } from "purify-ts";

import { SignTransactionCommand } from "@internal/app-binder/command/SignTransactionCommand";

const TX_DATA = Uint8Array.from([
  0x80, 0x00, 0x00, 0x2c, 0x80, 0x00, 0x01, 0x8d, 0x80, 0x00, 0x00, 0x00, 0x80,
  0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x63, 0x34,
  0x66, 0x35, 0x39, 0x34, 0x31, 0x65, 0x38, 0x31, 0x65, 0x30, 0x37, 0x31, 0x63,
  0x32, 0x66, 0x64, 0x31, 0x64, 0x61, 0x65, 0x32, 0x65, 0x37, 0x31, 0x66, 0x64,
  0x33, 0x64, 0x38, 0x35, 0x39, 0x64, 0x34, 0x36, 0x32, 0x34, 0x38, 0x34, 0x33,
  0x39, 0x31, 0x64, 0x39, 0x61, 0x39, 0x30, 0x62, 0x66, 0x32, 0x31, 0x39, 0x32,
  0x31, 0x31, 0x64, 0x63, 0x62, 0x62, 0x33, 0x32, 0x30, 0x66, 0x00, 0x57, 0xed,
  0x56, 0xb2, 0xd0, 0x6b, 0x69, 0xd1, 0xbd, 0xb3, 0xcd, 0x4d, 0x02, 0xcc, 0xb6,
  0xc1, 0x62, 0x3d, 0x1c, 0x18, 0xba, 0xce, 0x4d, 0x0e, 0x9a, 0xfc, 0x88, 0xd6,
  0xe2, 0x4f, 0x8f, 0x13, 0xa7, 0xd1, 0x08, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x40,
  0x00, 0x00, 0x00, 0x64, 0x63, 0x37, 0x65, 0x33, 0x34, 0x65, 0x65, 0x63, 0x65,
  0x63, 0x33, 0x30, 0x39, 0x36, 0x61, 0x34, 0x61, 0x36, 0x36, 0x31, 0x65, 0x31,
  0x30, 0x39, 0x33, 0x32, 0x38, 0x33, 0x34, 0x66, 0x38, 0x30, 0x31, 0x31, 0x34,
  0x39, 0x63, 0x34, 0x39, 0x64, 0x62, 0x61, 0x39, 0x62, 0x39, 0x33, 0x33, 0x32,
  0x32, 0x66, 0x36, 0x64, 0x39, 0x64, 0x65, 0x31, 0x38, 0x30, 0x34, 0x37, 0x66,
  0x39, 0x63, 0x76, 0x4c, 0x3a, 0xe1, 0x4f, 0xa4, 0x25, 0x45, 0x4a, 0x2f, 0x5d,
  0x25, 0x88, 0xaf, 0x95, 0x36, 0xc5, 0x1c, 0x40, 0x65, 0xca, 0xe3, 0xcd, 0x37,
  0x85, 0xa5, 0x92, 0xf9, 0x23, 0x58, 0xf1, 0x9e, 0x01, 0x00, 0x00, 0x00, 0x04,
  0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc4, 0xf5, 0x94, 0x1e,
]);

const EXPECTED_LAST_APDU = Uint8Array.from([
  ...[0x80, 0x02, 0x80, 0x57, 0xff],
  ...TX_DATA,
]);
const EXPECTED_FIRST_APDU = Uint8Array.from([
  ...[0x80, 0x02, 0x00, 0x57, 0xff],
  ...TX_DATA,
]);

describe("SignTransactionCommand", () => {
  describe("getApdu", () => {
    it("should create a correct apdu if last chunk", () => {
      // given
      const command = new SignTransactionCommand({
        data: TX_DATA,
        isLastChunk: true,
      });
      // when
      const apdu = command.getApdu();
      // then
      expect(apdu.getRawApdu()).toStrictEqual(EXPECTED_LAST_APDU);
    });
    it("should create a correct apdu if not last chunk", () => {
      // given
      const command = new SignTransactionCommand({
        data: TX_DATA,
        isLastChunk: false,
      });
      // when
      const apdu = command.getApdu();
      // then
      expect(apdu.getRawApdu()).toStrictEqual(EXPECTED_FIRST_APDU);
    });
  });
  describe("parseResponse", () => {
    it("should return Nothing if not last chunk", () => {
      // given
      const command = new SignTransactionCommand({
        data: Uint8Array.from([]),
        isLastChunk: false,
      });
      const response = new ApduResponse({
        statusCode: Uint8Array.from([0x90, 0x00]),
        data: Uint8Array.from([]),
      });
      // when
      const result = command.parseResponse(response);
      // then
      expect(result).toStrictEqual(CommandResultFactory({ data: Nothing }));
    });
    it("should return response data if last chunk", () => {
      // given
      const command = new SignTransactionCommand({
        data: Uint8Array.from([0x42, 0x87]),
        isLastChunk: true,
      });
      const response = new ApduResponse({
        statusCode: Uint8Array.from([0x90, 0x00]),
        data: Uint8Array.from([0x76, 0x84, 0x78]),
      });
      // when
      const result = command.parseResponse(response);
      // then
      expect(result).toStrictEqual(
        CommandResultFactory({
          data: Just(Uint8Array.from([0x76, 0x84, 0x78])),
        }),
      );
    });
    describe("error handling", () => {
      it("should return error if response is not success", () => {
        // given
        const command = new SignTransactionCommand({
          data: Uint8Array.from([0x42, 0x87]),
          isLastChunk: true,
        });
        const response = new ApduResponse({
          statusCode: Uint8Array.from([0x55, 0x15]),
          data: Uint8Array.from([0x76, 0x84, 0x78]),
        });
        // when
        const result = command.parseResponse(response);
        // then
        expect(result).toStrictEqual(
          CommandResultFactory({
            error: GlobalCommandErrorHandler.handle(response),
          }),
        );
      });
    });
  });
});
