import { CommandResultFactory } from "@ledgerhq/device-management-kit";
import { InvalidStatusWordError } from "@ledgerhq/device-management-kit";
import { Just, Nothing } from "purify-ts";

import { SignPersonalMessageCommand } from "@internal/app-binder/command/SignPersonalMessageCommand";
import { makeDeviceActionInternalApiMock } from "@internal/app-binder/device-action/__test-utils__/makeInternalApi";

import { SendSignPersonalMessageTask } from "./SendSignPersonalMessageTask";

const SEND_MESSAGE_HELLO_WORLD = "Hello, World!";
const SEND_MESSAGE_HELLO_WORLD_BYTES = new Uint8Array([
  0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21,
]);
const SEND_MESSAGE_HELLO_WORLD_DATA = new Uint8Array([
  0x05, 0x80, 0x00, 0x00, 0x2c, 0x80, 0x00, 0x00, 0x3c, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x48,
  0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21,
]);

const MESSAGE_LONG =
  "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
const MESSAGE_LONG_DATA = new Uint8Array([
  0x05, 0x80, 0x00, 0x00, 0x2c, 0x80, 0x00, 0x00, 0x3c, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbd, 0x4c,
  0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f,
  0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c,
  0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20,
  0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c,
  0x69, 0x74, 0x2c, 0x20, 0x73, 0x65, 0x64, 0x20, 0x64, 0x6f, 0x20, 0x65, 0x69,
  0x75, 0x73, 0x6d, 0x6f, 0x64, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x20,
  0x69, 0x6e, 0x63, 0x69, 0x64, 0x69, 0x64, 0x75, 0x6e, 0x74, 0x20, 0x75, 0x74,
  0x20, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x65, 0x20, 0x65, 0x74, 0x20, 0x64, 0x6f,
  0x6c, 0x6f, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x61, 0x20, 0x61, 0x6c,
  0x69, 0x71, 0x75, 0x61, 0x2e, 0x20, 0x55, 0x74, 0x20, 0x65, 0x6e, 0x69, 0x6d,
  0x20, 0x61, 0x64, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x20, 0x76, 0x65, 0x6e,
  0x69, 0x61, 0x6d, 0x2c, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x73,
  0x74, 0x72, 0x75, 0x64, 0x20, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x74, 0x61,
  0x74, 0x69, 0x6f, 0x6e, 0x20, 0x75, 0x6c, 0x6c, 0x61, 0x6d, 0x63, 0x6f, 0x20,
  0x6c, 0x61, 0x62, 0x6f, 0x72, 0x69, 0x73, 0x20, 0x6e, 0x69, 0x73, 0x69, 0x20,
  0x75, 0x74, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x70, 0x20, 0x65, 0x78,
  0x20, 0x65, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x6f, 0x20, 0x63,
  0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x61, 0x74, 0x2e, 0x20, 0x44, 0x75, 0x69,
  0x73, 0x20, 0x61, 0x75, 0x74, 0x65, 0x20, 0x69, 0x72, 0x75, 0x72, 0x65, 0x20,
  0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x70, 0x72,
  0x65, 0x68, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x74, 0x20, 0x69, 0x6e, 0x20,
  0x76, 0x6f, 0x6c, 0x75, 0x70, 0x74, 0x61, 0x74, 0x65, 0x20, 0x76, 0x65, 0x6c,
  0x69, 0x74, 0x20, 0x65, 0x73, 0x73, 0x65, 0x20, 0x63, 0x69, 0x6c, 0x6c, 0x75,
  0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x20, 0x65, 0x75, 0x20, 0x66,
  0x75, 0x67, 0x69, 0x61, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x20, 0x70,
  0x61, 0x72, 0x69, 0x61, 0x74, 0x75, 0x72, 0x2e, 0x20, 0x45, 0x78, 0x63, 0x65,
  0x70, 0x74, 0x65, 0x75, 0x72, 0x20, 0x73, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x63,
  0x63, 0x61, 0x65, 0x63, 0x61, 0x74, 0x20, 0x63, 0x75, 0x70, 0x69, 0x64, 0x61,
  0x74, 0x61, 0x74, 0x20, 0x6e, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x69, 0x64,
  0x65, 0x6e, 0x74, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20,
  0x63, 0x75, 0x6c, 0x70, 0x61, 0x20, 0x71, 0x75, 0x69, 0x20, 0x6f, 0x66, 0x66,
  0x69, 0x63, 0x69, 0x61, 0x20, 0x64, 0x65, 0x73, 0x65, 0x72, 0x75, 0x6e, 0x74,
  0x20, 0x6d, 0x6f, 0x6c, 0x6c, 0x69, 0x74, 0x20, 0x61, 0x6e, 0x69, 0x6d, 0x20,
  0x69, 0x64, 0x20, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x75,
  0x6d, 0x2e,
]);

describe("SendSignPersonalMessageTask", () => {
  const apiMock = makeDeviceActionInternalApiMock();
  const signature = {
    v: 27,
    r: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
    s: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
  };
  const resultOk = CommandResultFactory({
    data: Just(signature),
  });
  const resultNothing = CommandResultFactory({ data: Nothing });

  beforeEach(() => {
    jest.resetAllMocks();
  });

  describe("run", () => {
    it("should send the message in chunks", async () => {
      // GIVEN
      const args = {
        derivationPath: "44'/60'/0'/0/0",
        message: SEND_MESSAGE_HELLO_WORLD,
      };
      apiMock.sendCommand.mockResolvedValueOnce(resultOk);
      apiMock.sendCommand.mockResolvedValueOnce(resultNothing);

      // WHEN
      const result = await new SendSignPersonalMessageTask(apiMock, args).run();

      // THEN
      expect(apiMock.sendCommand.mock.calls).toHaveLength(1);
      expect(apiMock.sendCommand.mock.calls[0]![0]).toStrictEqual(
        new SignPersonalMessageCommand({
          data: new Uint8Array(SEND_MESSAGE_HELLO_WORLD_DATA),
          isFirstChunk: true,
        }),
      );
      // eslint-disable-next-line  @typescript-eslint/no-explicit-any
      expect((result as any).data).toStrictEqual(signature);
    });

    it("should send the message as byte arrays", async () => {
      // GIVEN
      const args = {
        derivationPath: "44'/60'/0'/0/0",
        message: SEND_MESSAGE_HELLO_WORLD_BYTES,
      };
      apiMock.sendCommand.mockResolvedValueOnce(resultOk);
      apiMock.sendCommand.mockResolvedValueOnce(resultNothing);

      // WHEN
      const result = await new SendSignPersonalMessageTask(apiMock, args).run();

      // THEN
      expect(apiMock.sendCommand.mock.calls).toHaveLength(1);
      expect(apiMock.sendCommand.mock.calls[0]![0]).toStrictEqual(
        new SignPersonalMessageCommand({
          data: new Uint8Array(SEND_MESSAGE_HELLO_WORLD_DATA),
          isFirstChunk: true,
        }),
      );
      // eslint-disable-next-line  @typescript-eslint/no-explicit-any
      expect((result as any).data).toStrictEqual(signature);
    });

    it("should send the long message in chunks", async () => {
      // GIVEN
      const args = {
        derivationPath: "44'/60'/0'/0/0",
        message: MESSAGE_LONG,
      };
      apiMock.sendCommand.mockResolvedValueOnce(resultNothing);
      apiMock.sendCommand.mockResolvedValueOnce(resultOk);

      // WHEN
      const result = await new SendSignPersonalMessageTask(apiMock, args).run();

      // THEN
      expect(apiMock.sendCommand.mock.calls).toHaveLength(2);
      expect(apiMock.sendCommand.mock.calls[0]![0]).toStrictEqual(
        new SignPersonalMessageCommand({
          data: MESSAGE_LONG_DATA.slice(0, 255),
          isFirstChunk: true,
        }),
      );
      expect(apiMock.sendCommand.mock.calls[1]![0]).toStrictEqual(
        new SignPersonalMessageCommand({
          data: MESSAGE_LONG_DATA.slice(255, 510),
          isFirstChunk: false,
        }),
      );
      // eslint-disable-next-line  @typescript-eslint/no-explicit-any
      expect((result as any).data).toStrictEqual(signature);
    });

    it("should return an error if the command fails", async () => {
      // GIVEN
      const args = {
        derivationPath: "44'/60'/0'/0/0",
        message: SEND_MESSAGE_HELLO_WORLD,
      };
      apiMock.sendCommand.mockResolvedValueOnce(
        CommandResultFactory({
          error: new InvalidStatusWordError("An error"),
        }),
      );

      // WHEN
      const result = await new SendSignPersonalMessageTask(apiMock, args).run();

      // THEN
      expect(result).toStrictEqual(
        CommandResultFactory({
          error: new InvalidStatusWordError("An error"),
        }),
      );
    });

    it("should return an error if the command returns no data", async () => {
      // GIVEN
      const args = {
        derivationPath: "44'/60'/0'/0/0",
        message: SEND_MESSAGE_HELLO_WORLD,
      };
      apiMock.sendCommand.mockResolvedValueOnce(resultNothing);

      // WHEN
      const result = await new SendSignPersonalMessageTask(apiMock, args).run();

      // THEN
      expect(result).toStrictEqual(
        CommandResultFactory({
          error: new InvalidStatusWordError("no signature returned"),
        }),
      );
    });
  });
});
