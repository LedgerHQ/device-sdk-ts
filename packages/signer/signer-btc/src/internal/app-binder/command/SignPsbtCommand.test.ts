import {
  ApduResponse,
  isSuccessCommandResult,
} from "@ledgerhq/device-management-kit";

import {
  SignPsbtCommand,
  type SignPsbtCommandArgs,
} from "@internal/app-binder/command/SignPsbtCommand";

const GLOBAL_COMMITMENTS = Uint8Array.from([
  0x05, 0x51, 0x9b, 0x38, 0xda, 0xe7, 0x44, 0x47, 0xb7, 0x21, 0x51, 0xf3, 0x54,
  0xcb, 0x13, 0x8c, 0xa3, 0x59, 0x1a, 0x5f, 0xf8, 0xac, 0x81, 0x32, 0x89, 0xb1,
  0x8a, 0x00, 0x4e, 0x31, 0x32, 0x16, 0x20, 0x3a, 0x22, 0x1f, 0x4b, 0xb9, 0x5e,
  0x1e, 0x63, 0x81, 0x43, 0x14, 0xa6, 0x93, 0xb3, 0x59, 0x35, 0x3d, 0x46, 0x60,
  0xa3, 0x43, 0x51, 0x65, 0xd3, 0xdf, 0xb7, 0x35, 0xce, 0x2d, 0xf5, 0xf5, 0x8f,
]);

const INPUTS_COMMITMENTS = Uint8Array.from([
  0x01, 0x2a, 0xc8, 0xcd, 0xbc, 0x6f, 0xd6, 0x43, 0x70, 0x05, 0x56, 0x63, 0xf9,
  0x50, 0x2f, 0xe3, 0x66, 0xed, 0xf8, 0x49, 0x70, 0xcc, 0x7d, 0x7e, 0xe8, 0xf6,
  0xba, 0x47, 0x59, 0x9f, 0x11, 0x05, 0xc2,
]);

const OUTPUTS_COMMITMENTS = Uint8Array.from([
  0x01, 0xd9, 0x35, 0x14, 0xd4, 0x29, 0x68, 0x8d, 0x76, 0x57, 0xc9, 0xaf, 0x0a,
  0x08, 0x86, 0xac, 0x74, 0x4b, 0xd0, 0x88, 0x1c, 0x4a, 0x19, 0x10, 0xb5, 0x37,
  0xfa, 0xba, 0x28, 0xcd, 0xca, 0x2e, 0x11,
]);
const WALLET_ID = Uint8Array.from([
  0x41, 0xac, 0x41, 0xa6, 0x16, 0xb4, 0xa2, 0xfa, 0xd4, 0x98, 0x26, 0x8f, 0xe9,
  0xc8, 0xa6, 0x3b, 0x88, 0x54, 0x87, 0x38, 0x39, 0x06, 0x5d, 0xe6, 0xfb, 0x2f,
  0xab, 0xf1, 0xfb, 0xe8, 0x92, 0x56,
]);
const WALLET_HMAC = Uint8Array.from([
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]);
const SIGN_PSBT_APDU = Uint8Array.from([
  0xe1,
  0x04,
  0x00,
  0x01,
  0xc5,
  ...GLOBAL_COMMITMENTS,
  0x01,
  ...INPUTS_COMMITMENTS,
  0x01,
  ...OUTPUTS_COMMITMENTS,
  ...WALLET_ID,
  ...WALLET_HMAC,
]);

describe("SignPsbtCommand", () => {
  const args: SignPsbtCommandArgs = {
    globalCommitments: GLOBAL_COMMITMENTS,
    inputsCount: 1,
    inputsCommitments: INPUTS_COMMITMENTS,
    outputsCount: 1,
    outputsCommitments: OUTPUTS_COMMITMENTS,
    walletId: WALLET_ID,
    walletHmac: WALLET_HMAC,
  };
  describe("getApdu", () => {
    it("should return a correct apdu", () => {
      const command = new SignPsbtCommand(args);

      expect(command.getApdu().getRawApdu()).toEqual(SIGN_PSBT_APDU);
    });
  });
  describe("parseResponse", () => {
    it("should return success", () => {
      // given
      const command = new SignPsbtCommand(args);
      const response = new ApduResponse({
        statusCode: Uint8Array.from([0x90, 0x00]),
        data: Uint8Array.from([]),
      });

      // when
      const result = command.parseResponse(response);

      // then
      expect(isSuccessCommandResult(result)).toBe(true);
    });
    it("should return failure", () => {
      // given
      const command = new SignPsbtCommand(args);
      const response = new ApduResponse({
        statusCode: Uint8Array.from([0x6d, 0x00]),
        data: new Uint8Array(0),
      });

      // when
      const result = command.parseResponse(response);

      // then
      expect(isSuccessCommandResult(result)).toBe(false);
    });
  });
});
